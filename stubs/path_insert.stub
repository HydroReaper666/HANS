.nds

.create "path_insert.bin", 0x0

.loadtable "../unicode.tbl"

.arm
path_insert:
	mov r4, sp

	mov r0, r5
	mov r2, #0
	wstrlen_loop:
		ldrh r1, [r0, r2]
		add r2, #2
		cmp r1, #0
		bne wstrlen_loop

	add r2, #directory_end-directory+3
	bic r2, #3 ; need stack to stay 0x4-aligned
	sub sp, r2
	str r4, [sp, #-4]!

	mov r0, r5
	add r1, sp, #4
	path_insert_loop1:
		ldrh r2, [r0], #2
		strh r2, [r1], #2
		cmp r2, #'/'
		bne path_insert_loop1
	mov r3, r0
	add r0, pc, directory-.-8
	path_insert_loop2:
		ldrh r2, [r0], #2
		cmp r2, #0
		strneh r2, [r1], #2
		bne path_insert_loop2
	mov r0, r3
	path_insert_loop3:
		ldrh r2, [r0], #2
		strh r2, [r1], #2
		cmp r2, #0
		bne path_insert_loop3

	ldmfd r4, {r0,r1,r2,r3}
	cmp r5, r1
	addeq r1, sp, #4
	addne r0, sp, #4
	blx r12

	ldr sp, [sp]
	add sp, #4
	ldmfd sp!, {r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,pc}

.pool

.align 0x4
directory:
	.string "deadbabe/"
	.byte 0x00, 0x00
directory_end:
	
	.align 0x4
	thunk0:
		stmfd sp!, {r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,lr}
		mov r5, r1
		mov r12, pc ; should point to the nop
		b path_insert
		nop
		ldr r12, [pc, #thunk0_data-.-8]
		bx r12
		thunk0_data:
			.word 0xdeadbabe
	thunk1:
		stmfd sp!, {r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,lr}
		mov r5, r1
		mov r12, pc ; should point to the nop
		b path_insert
		nop
		ldr r12, [pc, #thunk1_data-.-8]
		bx r12
		thunk1_data:
			.word 0xdeadbabe
	thunk2:
		stmfd sp!, {r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,lr}
		mov r5, r1
		mov r12, pc ; should point to the nop
		b path_insert
		nop
		ldr r12, [pc, #thunk2_data-.-8]
		bx r12
		thunk2_data:
			.word 0xdeadbabe
	thunk3:
		stmfd sp!, {r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,lr}
		mov r5, r1
		mov r12, pc ; should point to the nop
		b path_insert
		nop
		ldr r12, [pc, #thunk3_data-.-8]
		bx r12
		thunk3_data:
			.word 0xdeadbabe
	.word 0x4 ; number of available thunks

.Close
